(deftemplate car "this is a car"
  (slot from (allowed-symbols N S E W))
  (slot to (allowed-symbols straight right left))
  (slot arrival)
  (slot departure)
)

;
; Keep track of the turn
;
(defglobal ?*turn* = 0)

(deffacts F
  (car (from S) (to straight) (arrival 0))
  (car (from N) (to right) (arrival 2))
  (car (from E) (to straight) (arrival 4))
  (car (from W) (to right) (arrival 30))
  (car (from W) (to left) (arrival 40))
  (car (from W) (to left) (arrival 50))
  (car (from S) (to left) (arrival 6))
)

(defrule crossing "crossing"
  ?c <- (car (from ?f) (to ?t) (arrival ?a) (departure nil))
        (not (car (arrival ?a2&:(< ?a2 ?a)) (departure nil)))
=>
  (printout t "car arrived at time " ?a " departs from " ?f " and goes " ?t crlf)
  (bind ?*turn* (+ ?*turn* 1))
  (modify ?c (departure ?*turn*))
)
